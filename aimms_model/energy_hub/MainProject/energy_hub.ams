## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection Sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..24};
		}
		Set Energy_conversion_technologies {
			Index: conv;
			Definition: data {Gas_CHP,Gas_boiler,Grid,Heat_pump,Solar_PV,Solar_thermal};
		}
		Set Energy_carriers {
			Index: x;
			Definition: data {Elec,Heat};
		}
	}
	DeclarationSection Parameters {
		Parameter Loads {
			IndexDomain: (t,x);
		}
		Parameter Operating_costs {
			IndexDomain: conv | conv <> 'Grid';
			Definition: data {Gas_CHP:0.09,Gas_boiler:0.09,Heat_pump:0,Solar_PV:0,Solar_thermal:0};
		}
		Parameter Operating_costs_grid {
			Definition:0.24;
		}
		Parameter OMV_costs {
			IndexDomain: conv;
			Definition: data {Gas_CHP:0,Gas_boiler:0,Grid:0,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
		}
		Parameter Electricity_feedin_price {
			IndexDomain: x;
			Definition: data {Elec:0.14 };
		}
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Elec,Grid):1,(Elec,Solar_PV):0.14,(Heat,Gas_boiler):0.94,(Heat,Heat_pump):3.2,(Heat,Solar_thermal):0.46,(Elec,Gas_CHP):0.3,(Heat,Gas_CHP):0.519,(Elec,Heat_pump):-1}
			}
		}
		Parameter Capacity {
			IndexDomain:(x,conv);
			Definition: { data {(Elec,Solar_PV):0,(Heat,Heat_pump):100,(Heat,Gas_boiler):100,(Heat,Solar_thermal):0,(Elec,Gas_CHP):50,(Heat,Gas_CHP):86.5};
			}
		}
		Parameter Capacity_grid {
			Definition:1000000;
		}
		Parameter Minimum_part_load {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump');
			Definition: { data {(Elec,Gas_CHP):0.5,(Elec,Grid):0,(Elec,Solar_PV):0,(Heat,Gas_CHP):0.5,(Heat,Gas_boiler):0,(Heat,Heat_pump):0,(Heat,Solar_thermal):0}
			;}
		}
		Parameter Storage_max_charge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_max_discharge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: x;
			Definition: data {Elec:0.001,Heat:0.01 };
		}
		Parameter Storage_charging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_discharging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_min_SOC {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0 };
		}
		Parameter Storage_capacity {
			IndexDomain:(x);
			Definition: { data {Elec:100,Heat:100};
			}
		}
		Parameter Technology_carbon_factors {
			IndexDomain: (conv);
			Definition: data {Gas_CHP:0.09,Gas_boiler:0.09,Grid:0.24,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
		}
		Parameter Solar_radiation {
			IndexDomain: t;
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable Input_energy {
			IndexDomain: (t,conv);
			Range: nonnegative;
		}
		Variable Exported_energy {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Operation {
			IndexDomain: (t,conv) | (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			Range: binary;
		}
		Variable Output_energy_electricity  {
			IndexDomain: (t,conv) | Cmatrix('Elec',conv) > 0;
			Range: nonnegative;
			Definition: Input_energy(t,conv) * Cmatrix('Elec',conv);
		}
		Variable Output_energy_heat {
			IndexDomain: (t,conv) | Cmatrix('Heat',conv) > 0;
			Range: nonnegative;
			Definition: Input_energy(t,conv) * Cmatrix('Heat',conv);
		}
		Variable Operating_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_costs(conv) * sum(t,Input_energy(t,conv));
		}
		Variable Maintenance_cost_per_technology {
			IndexDomain: conv;
			Range: nonnegative;
			Definition: sum((t,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Total_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_cost_per_technology(conv) + Maintenance_cost_per_technology(conv);
		}
		Variable Total_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', Operating_cost_grid + Maintenance_cost_per_technology(conv));
		}
		Variable Storage_input_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_output_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_SOC {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Energy_demands {
			IndexDomain: (t,x);
			Range: nonnegative;
			Definition: Loads(t,x);
		}
		Variable Total_carbon_per_technology {
			IndexDomain: conv;
			Range: free;
			Definition: Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv));
		}
		Variable Total_carbon_per_timestep {
			IndexDomain: t;
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*Input_energy(t,conv));
		}
	}
	DeclarationSection Objective_functions {
		Variable Operating_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', sum(t, Operating_costs_grid * Input_energy(t,conv)));
		}
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum(t,Input_energy(t,conv)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(x, Electricity_feedin_price(x) * sum(t, Exported_energy(t,x)));
		}
		Variable Total_cost {
			Range: free;
			Definition: Operating_cost + Operating_cost_grid + Maintenance_cost + Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv)));
		}
	}
	DeclarationSection Constraints {
		Constraint Load_balance_constraint {
			IndexDomain: (t,x);
			Definition: sum(conv, Input_energy(t,conv) * Cmatrix(x,conv)) + Storage_output_energy(t,x) - Storage_input_energy(t,x) = Loads(t,x) + Exported_energy(t,x);
		}
		Constraint Capacity_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(x,conv);
		}
		Constraint Dispatch_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Big_M * Operation(t,conv);
		}
		Constraint Part_load_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) + Big_M * (1 - Operation(t,conv)) >= Minimum_part_load(x,conv) * Capacity(x,conv);
		}
		Constraint Solar_input_constraint {
			IndexDomain: (t,conv,x) | Cmatrix(x, conv) > 0 AND (conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) = Solar_radiation(t) * Capacity(x,conv) / 1000;
		}
		Constraint Grid_capacity_violation_constraint_import {
			IndexDomain: (t,conv) | conv='Grid';
			Definition: Input_energy(t,conv) <= Capacity_grid;
		}
		Constraint Grid_capacity_violation_constraint_export {
			IndexDomain: (t,x) | x='Elec';
			Definition: Exported_energy(t,x) <= Capacity_grid;
		}
		Constraint Storage_balance_constraint {
			IndexDomain: (t,x) | t > first(Time);
			Definition: Storage_SOC(t,x) = (1 - Storage_standing_losses(x)) * Storage_SOC(t-1,x) + Storage_charging_efficiency(x) *  Storage_input_energy(t,x) - (1 / Storage_discharging_efficiency(x)) * Storage_output_energy(t,x);
		}
		Constraint Storage_charging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_input_energy(t,x) <= Storage_max_charge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_discharging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_output_energy(t,x) <= Storage_max_discharge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_capacity_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) <= Storage_capacity(x);
		}
		Constraint Storage_minimum_SOC_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) >= Storage_capacity(x) * Storage_min_SOC(x);
		}
		Constraint Storage_initialization_constraint_electricity1 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Elec');
			Definition: Storage_SOC(t,x) = Storage_capacity(x) * Storage_min_SOC(x);
		}
		Constraint Storage_initialization_constrain_heat2 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Heat');
			Definition: Storage_SOC(t,x) = Storage_SOC(last(Time),x);
		}
		Constraint Storage_initialization_constraint_heat3 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Heat');
			Definition: Storage_output_energy(t,x) = 0;
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure Main_Execution {
		Body: {
			empty AllVariables;
			Load_Input_Data;
			solve Cost_minimization;
			Write_Output_Data;
		}
	}
	Procedure Load_Input_Data {
		Body: {
			Spreadsheet::RetrieveParameter( "electricity_demand.xlsx", Loads(t,'Elec'),"A1:A24","electricity_demand");
			Spreadsheet::RetrieveParameter( "heating_demand.xlsx", Loads(t,'Heat'),"A1:A24","heating_demand");
			Spreadsheet::RetrieveParameter( "solar_inputs.xlsx", Solar_radiation(t),"A1:A24","solar");
		}
	}
	Procedure Write_Output_Data {
		Body: {
			Spreadsheet::CreateWorkbook("results/results_demands.xlsx","Energy_demands");
			Spreadsheet::AssignTable("results/results_demands.xlsx",Energy_demands,"B2:C25","A2:A25","B1:C1","Energy_demands",0,1,1);
			Spreadsheet::CloseWorkbook("results/results_demands.xlsx",1);
			Spreadsheet::CreateWorkbook("results/results_conversion.xlsx","Input_energy");
			Spreadsheet::AssignTable("results/results_conversion.xlsx",Input_energy,"B2:G25","A2:A25","B1:G1","Input_energy",0,1,1);
			Spreadsheet::AddNewSheet("results/results_conversion.xlsx","Exported_energy");
			Spreadsheet::AssignTable("results/results_conversion.xlsx",Exported_energy,"B2:C25","A2:A25","B1:C1","Exported_energy",0,1,1);
			Spreadsheet::AddNewSheet("results/results_conversion.xlsx","Output_energy_electricity");
			Spreadsheet::AssignTable("results/results_conversion.xlsx",Output_energy_electricity,"B2:G25","A2:A25","B1:G1","Output_energy_electricity",0,1,1);
			Spreadsheet::AddNewSheet("results/results_conversion.xlsx","Output_energy_heat");
			Spreadsheet::AssignTable("results/results_conversion.xlsx",Output_energy_heat,"B2:G25","A2:A25","B1:G1","Output_energy_heat",0,1,1);
			Spreadsheet::CloseWorkbook("results/results_conversion.xlsx",1);
			Spreadsheet::CreateWorkbook("results/results_storage.xlsx","Storage_input_energy");
			Spreadsheet::AddNewSheet("results/results_storage.xlsx","Storage_output_energy");
			Spreadsheet::AddNewSheet("results/results_storage.xlsx","Storage_SOC");
			Spreadsheet::AssignTable("results/results_storage.xlsx",Storage_input_energy,"B2:C25","A2:A25","B1:C1","Storage_input_energy",0,1,1);
			Spreadsheet::AssignTable("results/results_storage.xlsx",Storage_output_energy,"B2:C25","A2:A25","B1:C1","Storage_output_energy",0,1,1);
			Spreadsheet::AssignTable("results/results_storage.xlsx",Storage_SOC,"B2:C25","A2:A25","B1:C1","Storage_SOC",0,1,1);
			Spreadsheet::CloseWorkbook("results/results_storage.xlsx",1);
			Spreadsheet::CreateWorkbook("results/results_costs.xlsx","Operating_cost_per_technology");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Maintenance_cost_per_technology");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Capital_cost_per_technology");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Total_cost_per_technology");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Operating_cost_grid");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Total_cost_grid");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Capital_cost_per_storage");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Total_cost_per_storage");
			Spreadsheet::AddNewSheet("results/results_costs.xlsx","Income_via_exports");
			Spreadsheet::AssignTable("results/results_costs.xlsx",Operating_cost_per_technology,"B1:B7","A1:A7","","Operating_cost_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/results_costs.xlsx",Total_cost_per_technology,"B1:B7","A1:A7","","Total_cost_per_technology",0,1,3);
			Spreadsheet::AssignValue("results/results_costs.xlsx",Operating_cost_grid,"A1:A1","Operating_cost_grid");
			Spreadsheet::AssignValue("results/results_costs.xlsx",Total_cost_grid,"A1:A1","Total_cost_grid");
			Spreadsheet::AssignValue("results/results_costs.xlsx",Income_via_exports,"A1:A1","Income_via_exports");
			Spreadsheet::CloseWorkbook("results/results_costs.xlsx",1);
			Spreadsheet::CreateWorkbook("results/results_emissions.xlsx","Total_carbon_per_technology");
			Spreadsheet::AddNewSheet("results/results_emissions.xlsx","Total_carbon_per_timestep");
			Spreadsheet::AssignTable("results/results_emissions.xlsx",Total_carbon_per_technology,"B1:B6","A1:A6","","Total_carbon_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/results_emissions.xlsx",Total_carbon_per_timestep,"B1:B24","A1:A24","","Total_carbon_per_timestep",0,1,3);
			Spreadsheet::CloseWorkbook("results/results_emissions.xlsx",1);
		}
	}
	Procedure Main_Termination {
		Body: {
			return 1;
		}
	}
}