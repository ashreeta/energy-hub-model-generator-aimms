TODO: 
Tu: Create a simple visualization module to visualize the results so you can easily compare the results of different models
Tu: Alter the variable names in the M files to make things more explicit, and rerun the model to make sure the results match
Tu: Run the storage AMS file and see if you can replicate the generic case study results
We: Set up the network AMS file considering the elements of the Suurstoffi case, and how all of them would fit into this setup
We: Set up the network AMS file for a single node, and see if you can replicate the generic energy hub results
We: Modify the network AMS file to have 2+ nodes, and check the results
Th: Create a set of input files for the Suurstoffi case
Th: Modify the M files to include the network code
Fr: Run the Suurstoffi case
When you're not considering investment and sizing, you need to have parameter inputs for the capacities of the different installed technologies, which need to be generated if you're not doing investment/sizing.  This isn't implemented now. It also needs to be implemented for the network case.

Model Energy_Hub_Model {
	DeclarationSection sets {
		Set Time {
			SubsetOf: Integers;
			Index: t;
			InitialData: data{1 ..8760};
		}
		Set Nodes {
			Index: (node,node2);
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		Set Links {
			Index: link;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		Set ConversionTechs {
			Index: conv;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		Set StorageTechs {
			Index: stor;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		Set EnergyCarriers {
			Index: x;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
	}
	DeclarationSection Load_Parameters {
		Parameter Loads {
			IndexDomain: (t,x,node);
		}
	}
	DeclarationSection Cost_Parameters {
		Parameter Operating_costs {
			IndexDomain: (conv);
			Definition: data {Heat_pump:0,Boiler:0.09,CHP1:0.09,PV:0,ST:0,CHP2:0.09,CHP3:0.09,Grid:0.24 };
		}
		Parameter OMV_costs {
			IndexDomain: conv | conv <> "Grid";
			Definition: data {Heat_pump:0.1,Boiler:0.01,CHP1:0.021,PV:0.06,ST:0.12,CHP2:0.021,CHP3:0.021,Grid:0 };
		}
		Parameter Linear_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,CHP1):1500,(Elec,PV):437.5,(Elec,CHP2):1500,(Elec,CHP3):1500,(Elec,Grid):0,(Heat,Heat_pump):1000,(Heat,Boiler):200,(Heat,ST):2030}
			};
		}
		Parameter Fixed_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,CHP1):0,(Elec,PV):0,(Elec,CHP2):0,(Elec,CHP3):0,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,ST):0}
			};
		}
		Parameter Linear_storage_costs {
			IndexDomain: stor;
			Definition: data {Battery:100,Hot_water_tank:100 };
		}
		Parameter Fixed_storage_costs {
			IndexDomain: stor;
			Definition: data {Battery:0,Hot_water_tank:0 };
		}
		Parameter Linear_link_costs {
			IndexDomain: x;
			Definition: data {Battery:100,Hot_water_tank:100 };
		}
		Parameter Fixed_link_costs {
			IndexDomain: x;
			Definition: data {Battery:0,Hot_water_tank:0 };
		}
		Parameter Electricity_feedin_price {
			IndexDomain: x;
			Definition: data {Heat:0,Cool:0,Elec:0.14 };
		}
		Parameter Interest_rate {
			Definition:0.08;
		}
		Parameter Lifetime {
			IndexDomain: conv | conv <> "Grid";
			Definition: data {Heat_pump:20,Boiler:30,CHP1:20,PV:20,ST:35,CHP2:20,CHP3:20,Grid:0 };
		}
		Parameter Lifetime_storage {
			IndexDomain: stor;
			Definition: data {Battery:20,Hot_water_tank:17 };
		}
		Parameter Lifetime_link {
			IndexDomain: x;
			Definition: data {Battery:20,Hot_water_tank:17 };
		}
		Parameter CRF_tech {
			IndexDomain: conv | conv <> "Grid";
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime(inp)))));
		}
		Parameter CRF_stor {
			IndexDomain: stor;
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime_storage(stor)))));
		}
		Parameter CRF_link {
			IndexDomain: x;
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime_link(x)))));
		}
	}
	DeclarationSection Technical_Parameters {
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Elec,CHP1):0.3,(Elec,PV):0.14,(Elec,CHP2):0.3,(Elec,CHP3):0.3,(Elec,Grid):1,(Heat,Heat_pump):3.2,(Heat,Boiler):0.94,(Heat,CHP1):0.3,(Heat,ST):0.46,(Heat,CHP2):0.3,(Heat,CHP3):0.3,(Elec,Heat_pump):-1}
			}
		}
		Parameter Max_allowable_cap {
			IndexDomain: conv | conv ='Heat_pump' OR conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3';
			Definition: data {Heat_pump:100,Boiler:100,CHP1:50,CHP2:50,CHP3:50 };
		}
		Parameter Min_part_load {
			IndexDomain: (x,disp) | Cmatrix(x,disp) > 0;
			Definition: { data {(Elec,CHP1):0.5,(Elec,PV):0,(Elec,CHP2):0.5,(Elec,CHP3):0.5,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,CHP1):0.5,(Heat,ST):0,(Heat,CHP2):0.5,(Heat,CHP3):0.5}
			}
		}
		Parameter Smatrix {
			IndexDomain: (x,stor);
			Definition: { data {(Elec,Battery):1.0,(Heat,Hot_water_tank):1.0}
			}
		}		
		Parameter Storage_max_charge {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Battery:0.3 };
		}
		Parameter Storage_max_discharge {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Battery:0.3 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.01,Battery:0.001 };
		}
		Parameter Storage_charging_eff {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Battery:0.9 };
		}
		Parameter Storage_discharging_eff {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Battery:0.9 };
		}
		Parameter Storage_min_soc {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0,Battery:0.3 };
		}
		Parameter Storage_max_capacity {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:100,Battery:100 };
		}
		Parameter Lmatrix {
			IndexDomain: (x,link);
			Definition: { data {(Elec,Battery):1.0,(Heat,Hot_water_tank):1.0}
			}
		}
		Parameter LNmatrix {
			IndexDomain: (node1,node2);
			Definition: { data {(Elec,Battery):1.0,(Heat,Hot_water_tank):1.0}
			}
		}
		Parameter Link_losses {
			IndexDomain: x;
			Definition: data {Hot_water_tank:0.01,Battery:0.001 };
		}
		Parameter Link_max_capacity {
			IndexDomain: x;
			Definition: data {Hot_water_tank:100,Battery:100 };
		}
	}
	DeclarationSection Other_Parameters {
		Parameter Roof_area {
			IndexDomain: node;
			Definition: data {1:50};
		}
		Parameter Carbon_factors {
			IndexDomain: (conv);
			Definition: data {Heat_pump:0,Boiler:0.198,CHP1:0.198,PV:0,ST:0,CHP2:0.198,CHP3:0.198,Grid:0.137 };
		}
		Parameter P_solar {
			IndexDomain: (node,t);
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables_Conversion_Techs {
		Variable P {
			IndexDomain: (node,t,conv);
			Range: nonnegative;
		}
		Variable P_export {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable y {
			IndexDomain: (node,x,conv) | Cmatrix(x,conv) > 0;
			Range: binary;
		}
		Variable y_on {
			IndexDomain: (node,t,disp);
			Range: binary;
		}
		Variable Capacity {
			IndexDomain: (node,x,conv) | Cmatrix(x,conv) > 0;
			Range: integer;
		}
	}
	DeclarationSection Variables_Storage_Techs {
		Variable Qin {
			IndexDomain: (node,t,stor);
			Range: nonnegative;
		}
		Variable Qout {
			IndexDomain: (node,t,stor);
			Range: nonnegative;
		}
		Variable E {
			IndexDomain: (node,t,stor);
			Range: nonnegative;
		}
		Variable Storage_cap {
			IndexDomain: (node,x,stor) | Smatrix(x,stor) > 0;
			Range: nonnegative;
		}
		Variable y_stor {
			IndexDomain: (node,x,stor) | Smatrix(x,stor) > 0;
			Range: binary;
		}
	}
	DeclarationSection Links {
		Variable Flow_magnitude {
			IndexDomain: (link,t);
			Range: nonnegative;
		}
		Variable Flow_direction {
			IndexDomain: (link,t,???);
			Range: ???;
		}
		Variable Link_capacity {
			IndexDomain: link;
			Range: nonnegative;
		}
		Variable Link_installed {
			IndexDomain: link;
			Range: binary;
		}
	}
	DeclarationSection Objective_fncts {
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv, Operating_costs(conv) * sum(t,P(t,conv)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: P(t,conv) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(x, Electricity_feedin_price(x) * sum(t, P_export(t,x)));
		}
		Variable Capital_cost {
			Range: nonnegative;
			Definition: sum((x,conv), (Fixed_capital_costs(x,conv) * y(x,conv) + Linear_capital_costs(x,conv) * Capacity(x,conv)) * CRF_tech(conv)) + sum((x,stor),(Fixed_storage_costs(stor) * y_stor(x,stor) + Linear_storage_costs(stor) * Storage_cap(x,stor)) * CRF_stor(stor));
		}
		Variable Total_cost {
			Range: free;
			Definition: Capital_cost + Operating_cost + Maintenance_cost - Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(inp,Carbon_factors(inp)*sum(t,P(t,inp)));
		}
	}

