## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..8760};
		}
		Set Inputs {
			Index: inp;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		Set Solar_inputs {
			SubsetOf: Inputs;
			Index: sol;
			Definition: data {PV,ST};
		}
		Set Inputs_wo_grid {
			SubsetOf: Inputs;
			Index: inp2;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3};
		}
		Set Dispatchable_tech {
			SubsetOf: Inputs;
			Index: disp;
			Definition: data {Boiler,CHP1,CHP2,CHP3,Heat_pump};
		}
		Set CHP_engines {
			SubsetOf: Inputs;
			Index: chp;
			Definition: data {CHP1,CHP2,CHP3};
		}
		Set Storage_techs {
			Index: stor;
			Definition: data {Battery,Hot_water_tank};
		}
		Set Outputs {
			Index: out;
			Definition: data {Elec,Heat};
		}
	}
	DeclarationSection Load_Parameters {
		Parameter Loads {
			IndexDomain: (t,out);
		}
	}
	DeclarationSection Cost_Parameters {
		Parameter Operating_costs {
			IndexDomain: (inp);
			Definition: data {Heat_pump:0,Boiler:0.09,CHP1:0.09,PV:0,ST:0,CHP2:0.09,CHP3:0.09,Grid:0.24 };
		}
		Parameter OMV_costs {
			IndexDomain: inp | inp <> "Grid";
			Definition: data {Heat_pump:0.1,Boiler:0.01,CHP1:0.021,PV:0.06,ST:0.12,CHP2:0.021,CHP3:0.021,Grid:0 };
		}
		Parameter Linear_capital_costs {
			IndexDomain: (out,inp) | Cmatrix(out,inp) > 0;
			Definition: {
			data {(Elec,CHP1):1500,(Elec,PV):437.5,(Elec,CHP2):1500,(Elec,CHP3):1500,(Elec,Grid):0,(Heat,Heat_pump):1000,(Heat,Boiler):200,(Heat,ST):2030}
			};
		}
		Parameter Fixed_capital_costs {
			IndexDomain: (out,inp) | Cmatrix(out,inp) > 0;
			Definition: {
			data {(Elec,CHP1):0,(Elec,PV):0,(Elec,CHP2):0,(Elec,CHP3):0,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,ST):0}
			};
		}
		Parameter Linear_storage_costs {
			IndexDomain: stor;
			Definition: data {Battery:100,Hot_water_tank:100 };
		}
		Parameter Fixed_storage_costs {
			IndexDomain: stor;
			Definition: data {Battery:0,Hot_water_tank:0 };
		}
		Parameter Electricity_feedin_price {
			IndexDomain: out;
			Definition: data {Heat:0,Cool:0,Elec:0.14 };
		}
		Parameter Interest_rate {
			Definition:0.08;
		}
		Parameter Lifetime {
			IndexDomain: inp | inp <> "Grid";
			Definition: data {Heat_pump:20,Boiler:30,CHP1:20,PV:20,ST:35,CHP2:20,CHP3:20,Grid:0 };
		}
		Parameter Lifetime_storage {
			IndexDomain: stor;
			Definition: data {Battery:20,Hot_water_tank:17 };
		}
		Parameter CRF_tech {
			IndexDomain: inp | inp <> "Grid";
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime(inp)))));
		}
		Parameter CRF_stor {
			IndexDomain: stor;
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime_storage(stor)))));
		}
	}
	DeclarationSection Technical_Parameters {
		Parameter Cmatrix {
			IndexDomain: (out,inp);
			Definition: { data {(Elec,CHP1):0.3,(Elec,PV):0.14,(Elec,CHP2):0.3,(Elec,CHP3):0.3,(Elec,Grid):1,(Heat,Heat_pump):3.2,(Heat,Boiler):0.94,(Heat,CHP1):0.3,(Heat,ST):0.46,(Heat,CHP2):0.3,(Heat,CHP3):0.3,(Elec,Heat_pump):-1}
			}
		}
		Parameter Smatrix {
			IndexDomain: (out,stor);
			Definition: { data {(Elec,Battery):1.0,(Heat,Hot_water_tank):1.0}
			}
		}
		Parameter Max_allowable_cap {
			IndexDomain: inp | inp ='Heat_pump' OR inp ='Boiler' OR inp ='CHP1' OR inp ='CHP2' OR inp ='CHP3';
			Definition: data {Heat_pump:100,Boiler:100,CHP1:50,CHP2:50,CHP3:50 };
		}
		Parameter Min_part_load {
			IndexDomain: (out,disp) | Cmatrix(out,disp) > 0;
			Definition: { data {(Elec,CHP1):0.5,(Elec,PV):0,(Elec,CHP2):0.5,(Elec,CHP3):0.5,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,CHP1):0.5,(Heat,ST):0,(Heat,CHP2):0.5,(Heat,CHP3):0.5}
			}
		}
		Parameter Storage_max_charge {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Battery:0.3 };
		}
		Parameter Storage_max_discharge {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Battery:0.3 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.01,Battery:0.001 };
		}
		Parameter Storage_charging_eff {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Battery:0.9 };
		}
		Parameter Storage_discharging_eff {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Battery:0.9 };
		}
		Parameter Storage_min_soc {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0,Battery:0.3 };
		}
		Parameter Storage_max_capacity {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:100,Battery:100 };
		}
	}
	DeclarationSection Other_Parameters {
		Parameter Roof_area {
			Definition:50;
		}
		Parameter Carbon_factors {
			IndexDomain: (inp);
			Definition: data {Heat_pump:0,Boiler:0.198,CHP1:0.198,PV:0,ST:0,CHP2:0.198,CHP3:0.198,Grid:0.137 };
		}
		Parameter P_solar {
			IndexDomain: t;
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable P {
			IndexDomain: (t,inp);
			Range: nonnegative;
		}
		Variable P_export {
			IndexDomain: (t,out) | out = "Elec";
			Range: nonnegative;
		}
		Variable y {
			IndexDomain: (out,inp) | Cmatrix(out,inp) > 0;
			Range: binary;
		}
		Variable y_on {
			IndexDomain: (t,disp);
			Range: binary;
		}
		Variable Capacity {
			IndexDomain: (out,inp) | Cmatrix(out,inp) > 0;
			Range: integer;
		}
	}
	DeclarationSection Storage {
		Variable Qin {
			IndexDomain: (t,stor);
			Range: nonnegative;
		}
		Variable Qout {
			IndexDomain: (t,stor);
			Range: nonnegative;
		}
		Variable E {
			IndexDomain: (t,stor);
			Range: nonnegative;
		}
		Variable Storage_cap {
			IndexDomain: (out,stor) | Smatrix(out,stor) > 0;
			Range: nonnegative;
		}
		Variable y_stor {
			IndexDomain: (out,stor) | Smatrix(out,stor) > 0;
			Range: binary;
		}
	}
	DeclarationSection Objective_fncts {
		Variable Operating_cost {
			Range: free;
			Definition: sum(inp, Operating_costs(inp) * sum(t,P(t,inp)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,inp,out), Maintenance_cost_per_timestep(t,inp,out));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,inp,out) | Cmatrix(out,inp) > 0;
			Range: free;
			Definition: P(t,inp) * Cmatrix(out,inp) * OMV_costs(inp);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(out, Electricity_feedin_price(out) * sum(t, P_export(t,out)));
		}
		Variable Capital_cost {
			Range: nonnegative;
			Definition: sum((out,inp), (Fixed_capital_costs(out,inp) * y(out,inp) + Linear_capital_costs(out,inp) * Capacity(out,inp)) * CRF_tech(inp)) + sum((out,stor),(Fixed_storage_costs(stor) * y_stor(out,stor) + Linear_storage_costs(stor) * Storage_cap(out,stor)) * CRF_stor(stor));
		}
		Variable Total_cost {
			Range: free;
			Definition: Capital_cost + Operating_cost + Maintenance_cost - Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(inp,Carbon_factors(inp)*sum(t,P(t,inp)));
		}
	}
	DeclarationSection Energy_conversion_constraints {
		Constraint Load_balance {
			IndexDomain: (t,out);
			Definition: sum(inp, P(t,inp) * Cmatrix(out,inp)) + sum(stor, (Qout(t,stor) - Qin(t,stor)) *  Smatrix(out,stor)) = Loads(t,out) + P_export(t,out);
		}
		Constraint Capacity_const {
			IndexDomain: (t,out,disp) | Cmatrix(out,disp) > 0;
			Definition: P(t,disp) * Cmatrix(out,disp) <= Capacity(out,disp);
		}
		Constraint Max_cap_per_system {
			IndexDomain: (out,inp) | Cmatrix(out,inp) > 0 AND (inp ='Heat_pump' OR inp ='Boiler');
			Definition: Capacity(out,inp) <= Max_allowable_cap(inp);
		}
		Constraint Part_load_const1 {
			IndexDomain: (t,out,disp) | Cmatrix(out,disp) > 0;
			Definition: P(t,disp) * Cmatrix(out,disp) <= Big_M * y_on(t,disp);
		}
		Constraint Part_load_const2 {
			IndexDomain: (t,out,disp) | Cmatrix(out,disp) > 0;
			Definition: P(t,disp) * Cmatrix(out,disp) + Big_M * (1 - y_on(t,disp)) >= min_part_load(out,disp) * Capacity(out,disp);
		}
		Constraint Solar_input {
			IndexDomain: (t,sol,out) | Cmatrix(out, sol) > 0;
			Definition: P(t,sol) = P_solar(t) * Capacity(out,sol) / 1000;
		}
		Constraint Roof_area_non_violation {
			Definition:Capacity('Elec','PV')+Capacity('Heat','ST') <= Roof_area;
		}
		Constraint Fixed_cost_constr {
			IndexDomain: (out,inp);
			Definition: Capacity(out,inp) <= Big_M * y(out,inp);
		}
		Constraint HTP_constraint {
			IndexDomain: chp;
			Definition: Capacity('Heat',chp) = Cmatrix('Heat', chp) / Cmatrix('Elec', chp) * Capacity('Elec',chp);
		}
		Constraint CHP_heat_elec_constraint {
			IndexDomain: chp;
			Definition: y('Elec',chp) = y('Heat',chp);
		}
		Constraint CHP_discrete_cap_constraint {
			IndexDomain: chp;
			Definition: Capacity('Elec',chp) = Max_allowable_cap(chp) * y('Elec',chp);
		}
	}
	DeclarationSection Storage_constraints {
		Constraint Storage_balance {
			IndexDomain: (t,stor,out) | t > first(Time);
			Definition: E(t,stor) = Smatrix(out,stor) * ((1 - Storage_standing_losses(stor)) * E(t-1,stor) + Storage_charging_eff(stor) *  Qin(t,stor) - (1 / Storage_discharging_eff(stor)) * Qout(t,stor));
		}
		Constraint Storage_init_electricity_1 {
			IndexDomain: (t,stor,out) | t = first(Time) AND stor = "Battery";
			Definition: E(t,stor) = Storage_cap(out,stor) * Storage_min_soc(stor);
		}
		Constraint Storage_init_heat_2 {
			IndexDomain: (t,stor) | t = first(Time) AND stor = "Hot_water_tank";
			Definition: E(t,stor) = E(last(Time),stor);
		}
		Constraint Storage_init_heat_3 {
			IndexDomain: (t,stor) | t = first(Time) AND stor = "Hot_water_tank";
			Definition: Qout(t,stor) = 0;
		}
		Constraint Storage_charg_rate_cons {
			IndexDomain: (t,stor,out);
			Definition: Qin(t,stor) <= Storage_max_charge(stor) * Storage_cap(out,stor);
		}
		Constraint Storage_disch_rate_cons {
			IndexDomain: (t,stor,out);
			Definition: Qout(t,stor) <= Storage_max_discharge(stor) * Storage_cap(out,stor);
		}
		Constraint Storage_cap_const {
			IndexDomain: (t,stor,out);
			Definition: E(t,stor) <= Storage_cap(out,stor);
		}
		Constraint Storage_min_state {
			IndexDomain: (t,stor,out);
			Definition: E(t,stor) >= Storage_cap(out,stor) * Storage_min_soc(stor);
		}
		Constraint Fixed_cost_storage {
			IndexDomain: (out,stor);
			Definition: Storage_cap(out,stor) <= Big_M * y_stor(out,stor);
		}
		Constraint Max_allowable_storage {
			IndexDomain: (out,stor);
			Definition: Storage_cap(out,stor) <= Storage_max_capacity(stor);
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure MainExecution {
		Body: {
			empty AllVariables;
			Capacity('Heat','Heat_pump').relax := 1;
			Capacity('Heat','Boiler').relax := 1;
			Capacity('Elec','Grid').relax := 1;
			Spreadsheet::RetrieveParameter( "electricity_demand.xlsx", Loads(t,'Elec'),"A1:A8760","electricity_demand");
			Spreadsheet::RetrieveParameter( "heating_demand.xlsx", Loads(t,'Heat'),"A1:A8760","heating_demand");
			Spreadsheet::RetrieveParameter( "solar_insolation.xlsx", P_solar,"A1:A8760","solar");
			solve Cost_minimization;
			Spreadsheet::CreateWorkbook("energy_hub_results.xlsx","Input_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Exported_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Operation");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_input_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_output_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_SOC");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Installation");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Capacity");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_capacity");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Installation_storage");
			Spreadsheet::AssignTable("energy_hub_results.xlsx",P,"B2:I8761","A2:A8761","B1:I1","Input_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",P_export,"B2:C8761","A2:A8761","B1:C1","Exported_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",y_on,"B2:F8761","A2:A8761","B1:F1","Operation",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Qin,"B2:C8761","A2:A8761","B1:C1","Storage_input_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Qout,"B2:C8761","A2:A8761","B1:C1","Storage_output_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",E,"B2:C8761","A2:A8761","B1:C1","Storage_SOC",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",y,"B2:I3","A2:A3","B1:I1","Installation",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Capacity,"B2:I3","A2:A3","B1:I1","Capacity",0,1,1);
			Spreadsheet::CloseWorkbook("energy_hub_results.xlsx",1);
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
	}
}
