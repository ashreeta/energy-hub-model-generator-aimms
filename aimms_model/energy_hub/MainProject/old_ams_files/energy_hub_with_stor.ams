## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..8760};
		}
		Set Energy_conversion_technologies {
			Index: conv;
			Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3,Grid};
		}
		!Set Energy_conversion_technologies_nongrid {
		!	SubsetOf: Energy_conversion_technologies;
		!	Index: conv_nongrid;
		!	Definition: data {Heat_pump,Boiler,CHP1,PV,ST,CHP2,CHP3};
		!}
		!Set Grid {
		!	SubsetOf: Energy_conversion_technologies;
		!	Index: conv_grid;
		!	Definition: data {Grid};
		!}
		Set Energy_storage_technologies {
			Index: stor;
			Definition: data {Battery,Hot_water_tank};
		}
		Set Energy_carriers {
			Index: x;
			Definition: data {Elec,Heat};
		}
	}
	DeclarationSection Load_Parameters {
		Parameter Loads {
			IndexDomain: (t,x);
		}
	}
	DeclarationSection Cost_Parameters {
		Parameter Operating_costs {
			IndexDomain: conv;
			Definition: data {Heat_pump:0,Boiler:0.09,CHP1:0.09,PV:0,ST:0,CHP2:0.09,CHP3:0.09};
		}
		Parameter Operating_costs_grid {
			IndexDomain: t;
			!Definition: data{1:0.06,2:0.06,3:0.06,4:0.06,5:0.06,6:0.06,7:0.06,8:0.06,9:0.06,10:0.06};
		}
		Parameter OMV_costs {
			!IndexDomain: conv | conv <> "Grid";
			IndexDomain: conv;
			Definition: data {Heat_pump:0.1,Boiler:0.01,CHP1:0.021,PV:0.06,ST:0.12,CHP2:0.021,CHP3:0.021};
		}
		Parameter Linear_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,CHP1):1500,(Elec,PV):437.5,(Elec,CHP2):1500,(Elec,CHP3):1500,(Elec,Grid):0,(Heat,Heat_pump):1000,(Heat,Boiler):200,(Heat,ST):2030}
			};
		}
		Parameter Fixed_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,CHP1):0,(Elec,PV):0,(Elec,CHP2):0,(Elec,CHP3):0,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,ST):0}
			};
		}
		Parameter Linear_capital_costs_storage {
			IndexDomain: stor;
			!Definition: data {Battery:100,Hot_water_tank:100 };
			Definition: data {Battery:0.1,Hot_water_tank:0.1 };
		}
		Parameter Fixed_capital_costs_storage {
			IndexDomain: stor;
			Definition: data {Battery:0,Hot_water_tank:0 };
		}
		Parameter Electricity_feedin_price {
			IndexDomain: x;
			!Definition: data {Elec:0.14 };
			Definition: data {Elec:0.0 };
		}
		Parameter Interest_rate {
			Definition:0.08;
		}
		Parameter Lifetime {
			IndexDomain: conv | conv <> "Grid";
			Definition: data {Heat_pump:20,Boiler:30,CHP1:20,PV:20,ST:35,CHP2:20,CHP3:20,Grid:0 };
		}
		Parameter Lifetime_storage {
			IndexDomain: stor;
			Definition: data {Battery:20,Hot_water_tank:17 };
		}
		Parameter CRF_tech {
			IndexDomain: conv | conv <> "Grid";
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime(conv)))));
		}
		Parameter CRF_stor {
			IndexDomain: stor;
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime_storage(stor)))));
		}
	}
	DeclarationSection Technical_Parameters {
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Elec,CHP1):0.3,(Elec,PV):0.14,(Elec,CHP2):0.3,(Elec,CHP3):0.3,(Elec,Grid):1,(Heat,Heat_pump):3.2,(Heat,Boiler):0.94,(Heat,CHP1):0.3,(Heat,ST):0.46,(Heat,CHP2):0.3,(Heat,CHP3):0.3,(Elec,Heat_pump):-1}
			}
		}
		Parameter Smatrix {
			IndexDomain: (x,stor);
			Definition: { data {(Elec,Battery):1.0,(Heat,Hot_water_tank):1.0}
			}
		}
		Parameter Max_allowable_capacity {
			IndexDomain: conv | conv ='Heat_pump' OR conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3';
			Definition: data {Heat_pump:100,Boiler:100,CHP1:50,CHP2:50,CHP3:50 };
		}
		Parameter Minimum_part_load {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump');
			Definition: { data {(Elec,CHP1):0.5,(Elec,PV):0,(Elec,CHP2):0.5,(Elec,CHP3):0.5,(Elec,Grid):0,(Heat,Heat_pump):0,(Heat,Boiler):0,(Heat,CHP1):0.5,(Heat,ST):0,(Heat,CHP2):0.5,(Heat,CHP3):0.5}
			}
		}
		Parameter Storage_max_charge_rate {
			IndexDomain: stor;
			Definition: data {Battery:0.3,Hot_water_tank:0.25 };
		}
		Parameter Storage_max_discharge_rate {
			IndexDomain: stor;
			Definition: data {Battery:0.3,Hot_water_tank:0.25 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: stor;
			Definition: data {Battery:0.001,Hot_water_tank:0.01 };
		}
		Parameter Storage_charging_efficiency {
			IndexDomain: stor;
			Definition: data {Battery:0.9,Hot_water_tank:0.9 };
		}
		Parameter Storage_discharging_efficiency {
			IndexDomain: stor;
			Definition: data {Battery:0.9,Hot_water_tank:0.9 };
		}
		Parameter Storage_min_SOC {
			IndexDomain: stor;
			Definition: data {Battery:0.3,Hot_water_tank:0 };
		}
		Parameter Storage_maximum_capacity {
			IndexDomain: stor;
			Definition: data {Battery:100,Hot_water_tank:100 };
		}
	}
	DeclarationSection Other_Parameters {
		Parameter Building_roof_area {
			!Definition:50;
			Definition:200;
		}
		Parameter Technology_carbon_factors {
			IndexDomain: (conv);
			Definition: data {Heat_pump:0,Boiler:0.198,CHP1:0.198,PV:0,ST:0,CHP2:0.198,CHP3:0.198,Grid:0.137 };
		}
		Parameter Solar_radiation {
			IndexDomain: t;
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable Input_energy {
			IndexDomain: (t,conv);
			Range: nonnegative;
		}
		Variable Exported_energy {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Installation {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Range: binary;
		}
		Variable Operation {
			IndexDomain: (t,conv) | (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump' OR conv='Grid');
			Range: binary;
		}
		Variable Capacity {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			!Range: integer;
			Range: nonnegative;
		}
	}
	DeclarationSection Storage {
		Variable Storage_input_energy {
			IndexDomain: (t,x,stor);
			Range: nonnegative;
		}
		Variable Storage_output_energy {
			IndexDomain: (t,x,stor);
			Range: nonnegative;
		}
		Variable Storage_SOC {
			IndexDomain: (t,x,stor);
			Range: nonnegative;
		}
		Variable Storage_capacity {
			IndexDomain: (x,stor) | Smatrix(x,stor) > 0;
			Range: nonnegative;
		}
		Variable Installation_storage {
			IndexDomain: (x,stor) | Smatrix(x,stor) > 0;
			Range: binary;
		}
	}
	DeclarationSection Objective_fncts {
		Variable Operating_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', sum(t, Operating_costs_grid(t) * Input_energy(t,conv)));
		}
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum(t,Input_energy(t,conv)));
			!Definition: sum(conv_nongrid, Operating_costs(conv_nongrid) * sum(t,Input_energy(t,conv_nongrid)));
			!Definition: sum(conv_nongrid, Operating_costs(conv_nongrid) * sum(t,Input_energy(t,conv_nongrid))) + sum(conv_grid, sum(t, Operating_costs_grid(t) * Input_energy(t,conv_grid)));
			!Definition: sum(conv, Operating_costs(conv) * sum(t,Input_energy(t,conv)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(x, Electricity_feedin_price(x) * sum(t, Exported_energy(t,x)));
		}
		Variable Capital_cost {
			Range: nonnegative;
			Definition: sum((x,conv), (Fixed_capital_costs(x,conv) * Installation(x,conv) + Linear_capital_costs(x,conv) * Capacity(x,conv)) * CRF_tech(conv)) + sum((x,stor),(Fixed_capital_costs_storage(stor) * Installation_storage(x,stor) + Linear_capital_costs_storage(stor) * Storage_capacity(x,stor)) * CRF_stor(stor));
		}
		Variable Total_cost {
			Range: free;
			Definition: Capital_cost + Operating_cost + Operating_cost_grid + Maintenance_cost - Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv)));
		}
	}
	DeclarationSection Energy_conversion_constraints {
		Constraint Load_balance_constraint {
			IndexDomain: (t,x);
			Definition: sum(conv, Input_energy(t,conv) * Cmatrix(x,conv)) + sum(stor, (Storage_output_energy(t,x,stor) - Storage_input_energy(t,x,stor)) * Smatrix(x,stor)) = Loads(t,x) + Exported_energy(t,x);
		}
		
		Constraint Capacity_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(x,conv);
		}
		Constraint Maximum_capacity_constraint {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Heat_pump' OR conv ='Boiler');
			Definition: Capacity(x,conv) <= Max_allowable_capacity(conv);
		}
		Constraint Dispatch_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump' OR conv='Grid');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Big_M * Operation(t,conv);
		}
		Constraint Part_load_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump' OR conv='Grid');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) + Big_M * (1 - Operation(t,conv)) >= Minimum_part_load(x,conv) * Capacity(x,conv);
		}
		Constraint Operation_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Boiler' OR conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3' OR conv ='Heat_pump' OR conv='Grid');
			Definition: Operation(t,conv) <= Installation(x,conv);
		}
		Constraint Energy_export {
			IndexDomain: (t,x,conv) | x='Elec' AND conv='Grid';
			Definition: Exported_energy(t,x) <= Big_M * (1 - Operation(t,conv));
		}
		!Constraint Solar_installation {
		!	IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND conv ='PV';
		!	Definition: Installation(x,conv) = 1;
		!}
		!Constraint Solar_capacity {
		!	IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND conv ='PV';
		!	Definition: Capacity(x,conv) = Building_roof_area;
		!}
		Constraint Solar_input_constraint {
			IndexDomain: (t,conv,x) | Cmatrix(x, conv) > 0 AND (conv ='PV' OR conv ='ST');
			Definition: Input_energy(t,conv) = Solar_radiation(t) * Capacity(x,conv) / 1000;
		}
		Constraint Roof_area_constraint {
			Definition:Capacity('Elec','PV')+Capacity('Heat','ST') <= Building_roof_area;
		}
		Constraint Installation_constraint {
			IndexDomain: (x,conv);
			Definition: Capacity(x,conv) <= Big_M * Installation(x,conv);
		}
		Constraint CHP_HTP_constraint {
			IndexDomain: conv | (conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3');
			Definition: Capacity('Heat',conv) = Cmatrix('Heat', conv) / Cmatrix('Elec', conv) * Capacity('Elec',conv);
		}
		Constraint CHP_HTP_constraint2 {
			IndexDomain: conv | (conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3');
			Definition: Installation('Elec',conv) = Installation('Heat',conv);
		}
		Constraint CHP_installation_constraint {
			IndexDomain: conv | (conv ='CHP1' OR conv ='CHP2' OR conv ='CHP3');
			Definition: Capacity('Elec',conv) = Max_allowable_capacity(conv) * Installation('Elec',conv);
		}
	}
	DeclarationSection Storage_constraints {
		Constraint Storage_balance_constraint {
			IndexDomain: (t,x,stor) | t > first(Time)  AND  Smatrix(x,stor) > 0;
			Definition: Storage_SOC(t,x,stor) = (1 - Storage_standing_losses(stor)) * Storage_SOC(t-1,x,stor) + Storage_charging_efficiency(stor) *  Storage_input_energy(t,x,stor) - (1 / Storage_discharging_efficiency(stor)) * Storage_output_energy(t,x,stor);
		}
		Constraint Storage_initialization_constraint_electricity1 {
			IndexDomain: (t,x,stor) | t = first(Time) AND (stor ='Battery')  AND  Smatrix(x,stor) > 0;
			Definition: Storage_SOC(t,x,stor) = Storage_capacity(x,stor) * Storage_min_SOC(stor);
		}
		Constraint Storage_initialization_constrain_heat2 {
			IndexDomain: (t,x,stor) | t = first(Time) AND (stor ='Hot_water_tank')  AND  Smatrix(x,stor) > 0;
			Definition: Storage_SOC(t,x,stor) = Storage_SOC(last(Time),x,stor);
		}
		Constraint Storage_initialization_constraint_heat3 {
			IndexDomain: (t,x,stor) | t = first(Time) AND (stor ='Hot_water_tank') AND  Smatrix(x,stor) > 0;
			Definition: Storage_output_energy(t,x,stor) = 0;
		}
		Constraint Storage_charging_rate_constraint {
			IndexDomain: (t,x,stor);
			Definition: Storage_input_energy(t,x,stor) <= Storage_max_charge_rate(stor) * Storage_capacity(x,stor);
		}
		Constraint Storage_discharging_rate_constraint {
			IndexDomain: (t,x,stor);
			Definition: Storage_output_energy(t,x,stor) <= Storage_max_discharge_rate(stor) * Storage_capacity(x,stor);
		}
		Constraint Storage_capacity_constraint {
			IndexDomain: (t,x,stor);
			Definition: Storage_SOC(t,x,stor) <= Storage_capacity(x,stor);
		}
		Constraint Storage_minimum_SOC_constraint {
			IndexDomain: (t,x,stor);
			Definition: Storage_SOC(t,x,stor) >= Storage_capacity(x,stor) * Storage_min_SOC(stor);
		}
		Constraint Storage_installation_constraint {
			IndexDomain: (x,stor);
			Definition: Storage_capacity(x,stor) <= Big_M * Installation_storage(x,stor);
		}
		Constraint Storage_installation_constraint2 {
			IndexDomain: (x,stor)  |  Smatrix(x,stor) = 0;
			Definition: Installation_storage(x,stor) = 0;
		}
		Constraint Storage_maximum_capacity_constraint {
			IndexDomain: (x,stor)  |  Smatrix(x,stor) > 0;
			Definition: Storage_capacity(x,stor) <= Storage_maximum_capacity(stor);
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure MainExecution {
		Body: {
			empty AllVariables;
			Capacity('Heat','Heat_pump').relax := 1;
			Capacity('Heat','Boiler').relax := 1;
			Capacity('Elec','Grid').relax := 1;
			Spreadsheet::RetrieveParameter( "electricity_demand.xlsx", Loads(t,'Elec'),"A1:A8760","electricity_demand");
			Spreadsheet::RetrieveParameter( "heating_demand.xlsx", Loads(t,'Heat'),"A1:A8760","heating_demand");
			Spreadsheet::RetrieveParameter( "solar_inputs.xlsx", Solar_radiation(t),"B1:B8760","solar");
			Spreadsheet::RetrieveParameter( "electricity_costs.xlsx", Operating_costs_grid(t),"B1:B8760","electricity_costs");
			solve Cost_minimization;
			Spreadsheet::CreateWorkbook("energy_hub_results.xlsx","Input_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Exported_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Operation");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_input_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_output_energy");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_SOC");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Installation");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Capacity");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Storage_capacity");
			Spreadsheet::AddNewSheet("energy_hub_results.xlsx","Installation_storage");
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Input_energy,"B2:I8761","A2:A8761","B1:I1","Input_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Exported_energy,"B2:C8761","A2:A8761","B1:C1","Exported_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Operation,"B2:F8761","A2:A8761","B1:F1","Operation",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Storage_input_energy,"B2:C8761","A2:A8761","B1:C1","Storage_input_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Storage_output_energy,"B2:C8761","A2:A8761","B1:C1","Storage_output_energy",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Storage_SOC,"B2:C8761","A2:A8761","B1:C1","Storage_SOC",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Installation,"B2:I3","A2:A3","B1:I1","Installation",0,1,1);
			Spreadsheet::AssignTable("energy_hub_results.xlsx",Capacity,"B2:I3","A2:A3","B1:I1","Capacity",0,1,1);
			Spreadsheet::CloseWorkbook("energy_hub_results.xlsx",1);
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
	}
}
